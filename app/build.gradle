plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'io.qameta.allure' version '2.11.2' // 添加 Allure 插件
}

group = 'solid.humank'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Allure 配置
allure {
    version = '2.22.1' // Allure 工具版本
    autoconfigure = true
    aspectjweaver = true
    useJUnit5 {
        version = '2.22.1'
    }
    // 注意：不使用 resultsDir 和 reportDir 屬性，因為它們在當前版本中不可用
}

// 定義 Allure 結果目錄，供所有任務使用
def allureResultsDir = layout.buildDirectory.dir('allure-results').get().asFile.absolutePath

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.h2database:h2'
    
    // ArchUnit for architecture testing
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.0'
    
    // Cucumber for BDD testing
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'io.cucumber:cucumber-picocontainer:7.15.0' // 添加回 cucumber-picocontainer 依賴
    
    // JUnit 5 - 強制使用相同版本
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.platform:junit-platform-suite')
    
    // 確保 JUnit Platform 相關依賴版本一致
    constraints {
        testImplementation('org.junit.platform:junit-platform-commons:1.10.2')
        testImplementation('org.junit.platform:junit-platform-engine:1.10.2')
    }
    
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    
    // Spring Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Allure 依賴
    testImplementation 'io.qameta.allure:allure-junit5:2.22.1'
    testImplementation 'io.qameta.allure:allure-cucumber7-jvm:2.22.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.22.1'
    
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

tasks.named('test') {
    useJUnitPlatform()
    // 排除 Cucumber 測試，因為它們需要特殊設置
    exclude '**/CucumberTestRunner.class'
    
    // 添加 Allure 報告生成
    systemProperty 'allure.results.directory', "${buildDir}/allure-results"
    
    // 添加測試分類信息
    systemProperty 'allure.epic', 'DDD架構測試'
    systemProperty 'allure.feature', 'JUnit測試'
    systemProperty 'allure.story', 'Domain-Driven Design'
    
    // 確保測試結果被保存
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    
    // 修復 JUnit 依賴問題
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    
    // 添加更多診斷信息
    systemProperty 'junit.platform.output.capture.stdout', 'true'
    systemProperty 'junit.platform.output.capture.stderr', 'true'
    
    // 設置測試執行順序
    systemProperty 'junit.jupiter.testmethod.order.default', 'org.junit.jupiter.api.MethodOrderer$OrderAnnotation'
}

// Cucumber specific task
tasks.register('cucumber', JavaExec) {
    dependsOn assemble, testClasses
    getMainClass().set("io.cucumber.core.cli.Main")
    classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
    args = [
        '--plugin', 'pretty',
        '--plugin', 'html:build/reports/cucumber/cucumber-report.html',
        '--plugin', 'json:build/reports/cucumber/cucumber-report.json',
        '--plugin', 'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm',
        '--glue', 'solid.humank.genaidemo.bdd',
        'src/test/resources/features'
    ]
    
    // 添加 Allure 結果目錄
    systemProperty 'allure.results.directory', allureResultsDir
    
    // 添加 Cucumber 測試分類信息
    systemProperty 'allure.epic', 'BDD功能測試'
    systemProperty 'allure.feature', 'Cucumber測試'
    
    // 確保 Cucumber 測試結果被包含在 Allure 報告中
    finalizedBy {
        tasks.named('allureReport')
    }
}

// 架構測試任務 - 專門執行 DDD 與六邊形架構的規範測試
tasks.register('testArchitecture', Test) {
    description = '執行 DDD 與六邊形架構的規範測試'
    group = 'verification'
    
    useJUnitPlatform()
    
    // 只包含 architecture 包下的測試
    include '**/architecture/**'
    
    // 測試報告設置
    reports {
        html.required = true
        junitXml.required = true
    }
    
    // 輸出測試結果到特定目錄
    reports.html.outputLocation.set(file("${buildDir}/reports/tests/architecture"))
    
    // 顯示標準輸出流
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    
    // 確保在主要測試之前執行
    shouldRunAfter test
    
    // 添加 Allure 報告生成
    systemProperty 'allure.results.directory', allureResultsDir
    
    // 添加架構測試的 Allure 標籤信息
    systemProperty 'allure.epic', '架構合規性'
    systemProperty 'allure.feature', '架構規範測試'
    systemProperty 'allure.story', 'DDD與六邊形架構'
}

// 添加一個任務來運行所有測試
tasks.register('runAllTests') {
    dependsOn test, testArchitecture, cucumber
    description = '運行所有測試'
    group = 'verification'
    
    // 確保所有測試完成後生成 Allure 報告
    finalizedBy 'allureReport'
}

// 添加一個任務來運行所有測試並啟動 Allure 報告服務器
tasks.register('runAllTestsWithReport') {
    dependsOn 'runAllTests'
    description = '運行所有測試並啟動 Allure 報告服務器'
    group = 'verification'
    
    // 確保所有測試完成後啟動 Allure 報告服務器
    finalizedBy 'allureServe'
}

// 添加一個任務來清理 Allure 結果目錄
tasks.register('cleanAllureResults', Delete) {
    delete(allureResultsDir)
    description = '清理 Allure 結果目錄'
    group = 'build'
}

// 修改 clean 任務，確保也清理 Allure 相關目錄
tasks.named('clean') {
    dependsOn 'cleanAllureResults'
}

// 確保在生成報告前所有測試都已完成
tasks.named('allureReport') {
    // 確保 Allure 報告包含 Cucumber 測試結果
    doFirst {
        copy {
            from "${buildDir}/reports/cucumber"
            into "${buildDir}/allure-results"
            include "**/*.json"
        }
        
        // 複製 categories.json 和 environment.json 文件到 allure-results 目錄
        copy {
            from "src/test/resources/allure"
            into "${buildDir}/allure-results"
            include "categories.json"
            include "environment.json"
        }
        
        // 創建 executor.json 文件
        def executorFile = new File("${buildDir}/allure-results/executor.json")
        executorFile.text = """{
            "name": "Gradle",
            "type": "gradle",
            "buildName": "GenAI Demo Project",
            "reportName": "DDD 架構測試報告"
        }"""
    }
}

// 確保在啟動報告服務器前報告已生成
tasks.named('allureServe') {
    // 不需要顯式依賴 allureReport，因為 runAllTestsWithReport 已經設置了正確的依賴關係
}